;------------------------------------------------------------------------------

[platformio]
src_dir = .
description = EspUdpNet - 240101 v1a
; AVC       - Alexa Voice Control for ESPs  'avc4esp'
; EspUdpNet - WLAN Network of ESPs as nodes in a "Hub-and-Spokes" topology,
;             using WiFi-UDP both for intra-nodal text messaging and Alexa
;             communications (AVC) and webSockets for custom webpage monitor
; EPN       - End-Point-Node reference to any EspUdpNet node except the 
;             one built as the network Hub
; CUI       - Custom User Interface, demo: imbedded HTML webpage or (file cui.htm)
; POL       - Proof-of-Life, demo: LED_BUILTIN 1-sec toggle
;
; NOTES:
; Each ESP node has a unique custom IpAddress for easy maintenance and tracking
; PIO project condtitonally builds the Hub node OR a standard EPN w/ or w/o addons
; All nodes include:
;  - UDP formatted text messaging as: CMND / DEST / ORIG / MSG_ID [ /data ]
;  - LittleFS and a server for files management and HTTP request processing like:
;      HTML page delivery and file actions upload, download, create, empty and delete
;  - all nodes include Arduino OTA for PIO updates of sketch and data
;  - standard cui.htm HTML page includes an input command line and
;    a scrollable messages display - scroller toggle is ALT-Click on content
;
; Demo nodes use a 1-sec 'heartbeat' loop for test messaging traffic and POL. My
; physical device sensors and controlers have getter and/or getter latencies 
; precluding 'true' real-time access. Also, I often use smoothd-data-sampling via
; a circular readings storage queue for most physical device sensors. And finally,
; Alexa voice controls and user typed commands via a web page input form or an
; HTTP GET request are far from truely real-time operations.


[env]
framework        = arduino
upload_speed     = 921600
monitor_speed    = 115200
build_flags      = -std=c++11
  -D       HUB_ID=111  ; fixed ESP ID of the UdpNet HUB
  -D      VERSION='"${platformio.description}"'
  -D  SERIAL_BAUD=${env.monitor_speed}
  -D     MAX_CUIS=3    ; maximum simultaneously active consoleUIs
  -D MAX_MSG_SIZE=128  ; arbitrary - message size upper limit
  -D UDPNET_NODES=10   ; arbitrary - Max UdpNet nodes including HUB
  -D    HTTP_PORT=80   ; good for all and required for AVC


;------------------------------------------------------------------------------
;-- ESP8266 nodemcuv2 12E

[NodeMCU8266]   ; common nodemcuv2 setup configuration options
platform        = espressif8266
board           = nodemcuv2
board_build.filesystem = littlefs
board_build.ldscript   = eagle.flash.4m3m.ld
lib_deps =
    ottowinter/ESPAsyncTCP-esphome @ ^1.2.3
    ottowinter/ESPAsyncWebServer-esphome @ ^3.1.0
build_flags = 
    ${env.build_flags}
    -D FILES=LittleFS
    -D INVERTED=1


;-------
[esp111]
usb_port_id     = 0001                       ; DYNAMIC USB upload port id
extends         = NodeMCU8266                ; ...continuation
board_id        = 111                        ; esp device's custom ID/IP
build_flags     = ${NodeMCU8266.build_flags} ; compiler directives
    -D  BOARD_ID=${esp111.board_id}          ; esp device's custom ID/IP
    -D  ESP_NAME='"esp${esp111.board_id}"'   ; default esp name

[env:ota111]
extends         = esp111
upload_protocol = espota
upload_port     = 192.168.2.${esp111.board_id}

[env:usb111]
extends         = esp111
upload_port     = /dev/tty.usbserial-${esp111.usb_port_id}
monitor_port    = /dev/tty.usbserial-${esp111.usb_port_id}



;-------
[esp162]
usb_port_id     = 0001                       ; DYNAMIC USB upload port id
extends         = NodeMCU8266                ; ...continuation
board_id        = 162                        ; esp device's custom ID/IP
build_flags     = ${NodeMCU8266.build_flags} ; compiler directives
    -D  BOARD_ID=${esp162.board_id}          ; esp device's custom ID/IP
    -D  ESP_NAME='"esp${esp162.board_id}"'   ; default esp name

;[env:ota162]
;extends         = esp162
;upload_protocol = espota
;upload_port     = 192.168.2.${esp162.board_id}

[env:usb162]
extends         = esp162
upload_port     = /dev/tty.usbserial-${esp162.usb_port_id}
monitor_port    = /dev/tty.usbserial-${esp162.usb_port_id}

;------------------------------------------------------------------------------
